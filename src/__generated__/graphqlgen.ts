// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Item, User } from "./prisma-client";
import { Context } from "../types";

type UserRole = "GAME" | "MANAGER";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsItem {
    assetId: string;
  }

  export interface ArgsUser {
    address: string;
  }

  export type ItemsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item[] | Promise<Item[]>;

  export type ItemResolver = (
    parent: undefined,
    args: ArgsItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | null | Promise<Item | null>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    items: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>;

    item: (
      parent: undefined,
      args: ArgsItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace ItemResolvers {
  export const defaultResolvers = {
    id: (parent: Item) => parent.id,
    assetId: (parent: Item) => parent.assetId,
    name: (parent: Item) => parent.name,
    quantity: (parent: Item) => parent.quantity,
    imageUrl: (parent: Item) => parent.imageUrl,
    reissuable: (parent: Item) => parent.reissuable,
    timestamp: (parent: Item) => parent.timestamp,
    misc: (parent: Item) => (parent.misc === undefined ? null : parent.misc),
    rawParams: (parent: Item) => parent.rawParams,
    createdAt: (parent: Item) => parent.createdAt,
    updatedAt: (parent: Item) => parent.updatedAt
  };

  export type IdResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AssetIdResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type QuantityResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type GameResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type ImageUrlResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ReissuableResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TimestampResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type MiscResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RawParamsResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    assetId: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    quantity: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    game: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    imageUrl: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    reissuable: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    timestamp: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    misc: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    rawParams: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    address: (parent: User) => parent.address,
    name: (parent: User) => parent.name,
    roles: (parent: User) => parent.roles
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AddressResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RolesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserRole[] | Promise<UserRole[]>;

  export type ItemsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item[] | Promise<Item[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    address: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    roles: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserRole[] | Promise<UserRole[]>;

    items: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsAddUser {
    address: string;
    name: string;
  }

  export interface ArgsAddItem {
    assetId: string;
    name: string;
    quantity: number;
    gameAddress: string;
    imageUrl: string;
    reissuable: boolean;
    timestamp: string;
    misc: string | null;
    rawParams: string;
  }

  export interface ArgsDeleteItem {
    assetId: string;
  }

  export type AddUserResolver = (
    parent: undefined,
    args: ArgsAddUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type AddItemResolver = (
    parent: undefined,
    args: ArgsAddItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | Promise<Item>;

  export type DeleteItemResolver = (
    parent: undefined,
    args: ArgsDeleteItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | null | Promise<Item | null>;

  export interface Type {
    addUser: (
      parent: undefined,
      args: ArgsAddUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    addItem: (
      parent: undefined,
      args: ArgsAddItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | Promise<Item>;

    deleteItem: (
      parent: undefined,
      args: ArgsDeleteItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Item: ItemResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
}
