// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Item, Game } from "./prisma-client";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsFilterItems {
    searchString: string | null;
  }

  export interface ArgsItem {
    id: string;
  }

  export interface ArgsGame {
    id: string;
  }

  export type FeedResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item[] | Promise<Item[]>;

  export type FilterItemsResolver = (
    parent: undefined,
    args: ArgsFilterItems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item[] | Promise<Item[]>;

  export type ItemResolver = (
    parent: undefined,
    args: ArgsItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | null | Promise<Item | null>;

  export type GamesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game[] | Promise<Game[]>;

  export type GameResolver = (
    parent: undefined,
    args: ArgsGame,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | null | Promise<Game | null>;

  export interface Type {
    feed: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>;

    filterItems: (
      parent: undefined,
      args: ArgsFilterItems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>;

    item: (
      parent: undefined,
      args: ArgsItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>;

    games: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game[] | Promise<Game[]>;

    game: (
      parent: undefined,
      args: ArgsGame,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | null | Promise<Game | null>;
  }
}

export namespace ItemResolvers {
  export const defaultResolvers = {
    id: (parent: Item) => parent.id,
    createdAt: (parent: Item) => parent.createdAt,
    updatedAt: (parent: Item) => parent.updatedAt,
    name: (parent: Item) => parent.name,
    imgUrl: (parent: Item) => parent.imgUrl
  };

  export type IdResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ImgUrlResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GameResolver = (
    parent: Item,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export interface Type {
    id: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    imgUrl: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    game: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;
  }
}

export namespace GameResolvers {
  export const defaultResolvers = {
    id: (parent: Game) => parent.id,
    name: (parent: Game) => parent.name
  };

  export type IdResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ItemsResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item[] | Promise<Item[]>;

  export interface Type {
    id: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    items: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsAddGame {
    name: string;
  }

  export interface ArgsAddItem {
    name: string;
    imgUrl: string;
    gameId: string;
  }

  export interface ArgsDeleteItem {
    id: string;
  }

  export type AddGameResolver = (
    parent: undefined,
    args: ArgsAddGame,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export type AddItemResolver = (
    parent: undefined,
    args: ArgsAddItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | Promise<Item>;

  export type DeleteItemResolver = (
    parent: undefined,
    args: ArgsDeleteItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | null | Promise<Item | null>;

  export interface Type {
    addGame: (
      parent: undefined,
      args: ArgsAddGame,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;

    addItem: (
      parent: undefined,
      args: ArgsAddItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | Promise<Item>;

    deleteItem: (
      parent: undefined,
      args: ArgsDeleteItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Item: ItemResolvers.Type;
  Game: GameResolvers.Type;
  Mutation: MutationResolvers.Type;
}
